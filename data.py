# -*- coding: utf-8 -*-
"""Hotel_booking.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dj85E6XNEYN76qivjlgEzd0DDDRgAila

# Importing libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import plotly.express as px
warnings.filterwarnings('ignore')

"""# Reading data"""

df=pd.read_csv('hotel_bookings 2.csv')

df

"""# Exploratory and Data analysis and Data Cleaning"""

df.shape

for i in df.columns:
    print(i)

df.dtypes

#reservation_status_date  is an object we need to convert it into a Date so we work with it
df['reservation_status_date']=pd.to_datetime(df['reservation_status_date'])

df.reservation_status_date.dtype

#Looking at the data's statistical info
df.describe()

#we can see that there is a outliers in adr column so we need to get rid of it
#Removing outliers
# Calculate the first and third quartiles of the data
q1, q3 = df['adr'].quantile([0.25, 0.75])

# Calculate the IQR
iqr = q3 - q1

# Define the lower and upper bounds for outliers
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

# Identify the data points outside the bounds
outliers = (df['adr'] < lower_bound) | (df['adr'] > upper_bound)

# Remove the outliers from the DataFrame
df = df[~outliers]

len(df['days_in_waiting_list'].unique())

#Deleting outlier for waiting days
# Calculate the first and third quartiles of the data
q1, q3 = df['days_in_waiting_list'].quantile([0.01, 0.99])

# Calculate the IQR
iqr = q3 - q1

# Define the lower and upper bounds for outliers
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

# Identify the data points outside the bounds
outliers = (df['days_in_waiting_list'] < lower_bound) | (df['days_in_waiting_list'] > upper_bound)

# Remove the outliers from the DataFrame
df = df[~outliers]

len(df['days_in_waiting_list'].unique())

#looking at freq and unique values for the catigorical info
df.describe(include='object')

#dealing with null values
#we wanna see what columns include null values and percentage of the missing values
for col,val in df.isnull().sum().items():
    if val>0:
        print(f'{col}, {val/df.shape[0]:.4f}')

#we can remove agent and country columns and we remove the rows with null values for country and children
df.drop(['company','agent'],axis=1,inplace=True)

df.dropna(inplace=True)

#we can see that we don't have any null values
df.isnull().sum()

#and we have no outliers that we can notice from this table too
df.describe()

"""# Data Analysis and visualization"""

plt.figure(figsize=(14, 5))
colors= ['#5991eb', '#f52a48']
ax=plt.pie(data=df, x=df.is_canceled.value_counts().values ,
            labels = ['Bookings', 'Cancellations'], colors = colors
            , autopct='%.1f%%',
            wedgeprops = {"edgecolor" : "black",},
           explode = (0.05, 0),
          textprops={'fontsize':15, 'weight':'bold'})

plt.xlabel('Overall Bookings and Cancellations%',fontsize=15,weight='bold')
plt.rcParams['font.size'] = 13.0
plt.xticks()
plt.yticks()
plt.tight_layout()
plt.show()

"""### 1-type of the hotel and cancelation numbers

"""

plt.figure(figsize=(6,4))
ax1=sns.countplot(x='hotel',hue='is_canceled',data=df)
leg_labels,_=ax1.get_legend_handles_labels()
plt.title('Reservation status in diffrent types of hotels',size=10)
plt.xlabel('Type of hotel')
plt.ylabel('number of reservation')
plt.show()

"""### What we can understand from the figure above:
*We can see that the number of cancelation is way higher in city hotels

## 2-checking cancellation numbers each month and adr for each month
"""

df['month']=df.reservation_status_date.dt.month
plt.figure(figsize=(16,8))
ax1=sns.countplot(x='month',hue='is_canceled',data=df,width=0.8)
plt.title('Reservation status ')
plt.xlabel('Month')
plt.ylabel('Number of reservations per month')
plt.show()

plt.figure(figsize=(12,6))
df_cancelled = df[df['is_canceled'] == 1]
df_cancelled_by_month = df_cancelled.groupby('month')[['adr']].sum().reset_index()
sns.barplot(x='month', y='adr', data=df_cancelled_by_month)
plt.title('ADR per month')
plt.show()

"""## 3-checking the top 10 countries that cancel the reservation"""

country_cancel=df[df['is_canceled']==1]
top_10_country=country_cancel['country'].value_counts()[:10]
country_count=top_10_country.values
country_name=top_10_country.index
#plotting the top 10 countries
fig=px.scatter_geo(data_frame=top_10_country,locations=country_name,size=country_count,
color='country', hover_data={'country':False})
fig.show()

country_cancel=df[df['is_canceled']==1]
top_10_country=country_cancel['country'].value_counts()[:10]
#plotting the top 10 countries
plt.figure(figsize=(8,8))
plt.title('Top 10 countries with reservation candeled')
plt.pie(top_10_country,autopct='%.1f',labels=top_10_country.index)
plt.show()

"""## 4-checking if higher prices cause more cancellations"""

canceled=df[df['is_canceled']==1]
adr_canceled=canceled.groupby('reservation_status_date')[['adr']].mean()
adr_canceled=adr_canceled.sort_values('reservation_status_date',ascending=True)
not_canceled=df[df['is_canceled']==0]
adr_not_canceled=not_canceled.groupby('reservation_status_date')[['adr']].mean()
adr_not_canceled=adr_not_canceled.sort_values('reservation_status_date',ascending=True)

#plotting
plt.figure(figsize=(25,6))
plt.title('ADR vs cancelation')
plt.plot(adr_not_canceled.index,adr_not_canceled['adr'],label='not cancelled',linewidth=2)
plt.plot(adr_canceled.index,adr_canceled['adr'],linewidth=2,label='cancelled')
plt.legend()

"""# Market Segment

"""

d = df['market_segment'].value_counts()
plt.figure(figsize=(10,10))
p = plt.pie(d, labels=d.index, autopct="%.0f%%")
plt.title("Bookings by market segment")
